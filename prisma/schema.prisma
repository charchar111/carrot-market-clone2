// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?
  tokens          Token[]
  Products        Product[]
  Records         Record[]
  Posts           Post[]
  Wonderings      Wondering[]
  Answers         Answer[]
  WrittenReviews  Review[]    @relation(name: "WrittenReviews")
  ReceivedReviews Review[]    @relation(name: "ReceivedReviews")
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@index([userId])
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  price       Int
  image       String?
  name        String
  description String?  @db.MediumText
  latitude    Float?
  longitude   Float?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  Records     Record[]

  @@index([userId])
}

model Record {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kind      Kind
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@index([productId])
  @@index([userId])
}

enum Kind {
  FAVORITE
  PURCHASE
  SALE
}

model Post {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  title      String
  content    String?     @db.MediumText
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  latitude   Float?
  longitude  Float?
  Wonderings Wondering[]
  Answers    Answer[]

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  content   String   @db.MediumText

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@index([userId])
  @@index([postId])
}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  content      String   @db.MediumText
  createdBy    User     @relation(name: "WrittenReviews", fields: [CreatedById], references: [id], onDelete: Cascade)
  createdFor   User     @relation(name: "ReceivedReviews", fields: [CreatedForId], references: [id], onDelete: Cascade)
  CreatedById  Int
  CreatedForId Int

  @@index([CreatedById])
  @@index([CreatedForId])
}
